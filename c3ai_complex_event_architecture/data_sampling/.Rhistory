select(.,
uuidMeasure,
uuidObject,
validity,
measurementValue) %>%
mutate(.,
validity=as.character(validity))
return(data)
},mc.cores=8L)
end_time <- as.character(Sys.time())
names(event_records) <- names(valid_records)
event_records <- event_records %>%
ldply(.parallel=TRUE,
.id="eventType") %>%
mutate(.,
uuidObjectType=substr(eventType,
1,
36),
measurementValue=as.numeric(measurementValue),
.keep="unused") %>%
left_join(.,
objects,
by=c("uuidObjectType",
"uuidObject")) %>%
select(.,
-c(uuidObjectType,
uuidObject,
number)) %>%
left_join(.,
measures,
by="uuidMeasure") %>%
select(.,
-c(uuidMeasure,
number)) %>%
mutate(.,
object=description.x,
validity=validity,
measure=description.y,
measurementValue=measurementValue,
.keep="none") %>%
distinct(.,
object,
validity,
measure,
.keep_all=TRUE) %>%
pivot_wider(.,
names_from=measure,
values_from=measurementValue,
values_fill=NA)
write.table(event_records,
file=paste0("event_records_",
start_time,
"_",
end_time,
".csv"),
append=FALSE,
quote=FALSE,
sep=";",
row.names=FALSE,
col.names=TRUE)
#impact of US governor party affiliation on transit mobility, using reproduction number
model_data <- event_records %>%
filter(.,
str_detect(object,
regex("^state_us_"))) %>%
select(.,
cep_repronum_numeric,
leader_party_nominal,
c3_Google_TransitStationsMobility_index) %>%
.[which(complete.cases(.)),]
model_data[which(model_data$leader_party_nominal>1),]$leader_party_nominal <- 0
model <- lm(c3_Google_TransitStationsMobility_index ~.,
data=model_data)
summary(model)
model_data$leader_party_nominal <- as.factor(model_data$leader_party_nominal)
plot <- ggplot(model_data,
aes(x=cep_repronum_numeric,
y=c3_Google_TransitStationsMobility_index)) +
geom_point() +
xlim(0,3) +
theme_light() +
theme(legend.position=c(0.8, 0.2),
legend.background=element_rect(fill="lightgrey"))
ggsave("transit_no_party.tiff",
plot=plot,
device="tiff",
scale=1,
width=210,
height=210,
units="mm",
dpi=300)
plot <- ggplot(model_data,
aes(x=cep_repronum_numeric,
y=c3_Google_TransitStationsMobility_index,
shape=leader_party_nominal,
color=leader_party_nominal)) +
geom_point() +
xlim(0,3) +
theme_light() +
theme(legend.position=c(0.8, 0.2),
legend.background=element_rect(fill="lightgrey"))
ggsave("transit_party.tiff",
plot=plot,
device="tiff",
scale=1,
width=210,
height=210,
units="mm",
dpi=300)
#impact of US governor party affiliation on parks mobility, using reproduction number
model_data <- event_records %>%
filter(.,
str_detect(object,
regex("^state_us_"))) %>%
select(.,
cep_repronum_numeric,
leader_party_nominal,
c3_Google_ParksMobility_index) %>%
.[which(complete.cases(.)),]
model_data[which(model_data$leader_party_nominal>1),]$leader_party_nominal <- 0
model <- lm(c3_Google_ParksMobility_index ~.,
data=model_data)
summary(model)
model_data$leader_party_nominal <- as.factor(model_data$leader_party_nominal)
plot <- ggplot(model_data,
aes(x=cep_repronum_numeric,
y=c3_Google_ParksMobility_index)) +
geom_point() +
xlim(0,3) +
theme_light() +
theme(legend.position=c(0.8, 0.2),
legend.background=element_rect(fill="lightgrey"))
ggsave("parks_no_party.tiff",
plot=plot,
device="tiff",
scale=1,
width=210,
height=210,
units="mm",
dpi=300)
plot <- ggplot(model_data,
aes(x=cep_repronum_numeric,
y=c3_Google_ParksMobility_index,
shape=leader_party_nominal,
color=leader_party_nominal)) +
geom_point() +
xlim(0,3) +
theme_light() +
theme(legend.position=c(0.8, 0.2),
legend.background=element_rect(fill="lightgrey"))
ggsave("parks_party.tiff",
plot=plot,
device="tiff",
scale=1,
width=210,
height=210,
units="mm",
dpi=300)
#impact of US governor party affiliation on government response index, using reproduction number
model_data <- event_records %>%
filter(.,
str_detect(object,
regex("^state_us_"))) %>%
select(.,
cep_repronum_numeric,
leader_party_nominal,
c3_OxCGRT_Policy_GovernmentResponseIndex_mean_of_ordinal) %>%
.[which(complete.cases(.)),]
model_data[which(model_data$leader_party_nominal>1),]$leader_party_nominal <- 0
model <- lm(c3_OxCGRT_Policy_GovernmentResponseIndex_mean_of_ordinal ~.,
data=model_data)
summary(model)
model_data$leader_party_nominal <- as.factor(model_data$leader_party_nominal)
plot <- ggplot(model_data,
aes(x=cep_repronum_numeric,
y=c3_OxCGRT_Policy_GovernmentResponseIndex_mean_of_ordinal)) +
geom_point() +
xlim(0,3) +
theme_light() +
theme(legend.position=c(0.8, 0.2),
legend.background=element_rect(fill="lightgrey"))
ggsave("response_no_party.tiff",
plot=plot,
device="tiff",
scale=1,
width=210,
height=210,
units="mm",
dpi=300)
plot <- ggplot(model_data,
aes(x=cep_repronum_numeric,
y=c3_OxCGRT_Policy_GovernmentResponseIndex_mean_of_ordinal,
shape=leader_party_nominal,
color=leader_party_nominal)) +
geom_point() +
xlim(0,3) +
theme_light() +
theme(legend.position=c(0.8, 0.2),
legend.background=element_rect(fill="lightgrey"))
ggsave("response_party.tiff",
plot=plot,
device="tiff",
scale=1,
width=210,
height=210,
units="mm",
dpi=300)
#impact of US governor party affiliation on government economic support index, using reproduction number
model_data <- event_records %>%
filter(.,
str_detect(object,
regex("^state_us_"))) %>%
select(.,
cep_repronum_numeric,
leader_party_nominal,
c3_OxCGRT_Policy_EconomicSupportIndex_mean_of_ordinal) %>%
.[which(complete.cases(.)),]
model_data[which(model_data$leader_party_nominal>1),]$leader_party_nominal <- 0
model <- lm(c3_OxCGRT_Policy_EconomicSupportIndex_mean_of_ordinal ~.,
data=model_data)
summary(model)
model_data$leader_party_nominal <- as.factor(model_data$leader_party_nominal)
plot <- ggplot(model_data,
aes(x=cep_repronum_numeric,
y=c3_OxCGRT_Policy_EconomicSupportIndex_mean_of_ordinal)) +
geom_point() +
xlim(0,3) +
theme_light() +
theme(legend.position=c(0.8, 0.2),
legend.background=element_rect(fill="lightgrey"))
ggsave("support_no_party.tiff",
plot=plot,
device="tiff",
scale=1,
width=210,
height=210,
units="mm",
dpi=300)
plot <- ggplot(model_data,
aes(x=cep_repronum_numeric,
y=c3_OxCGRT_Policy_EconomicSupportIndex_mean_of_ordinal,
shape=leader_party_nominal,
color=leader_party_nominal)) +
geom_point() +
xlim(0,3) +
theme_light() +
theme(legend.position=c(0.8, 0.2),
legend.background=element_rect(fill="lightgrey"))
ggsave("support_party.tiff",
plot=plot,
device="tiff",
scale=1,
width=210,
height=210,
units="mm",
dpi=300)
outcomes <- c("c3_Google_ResidentialMobility_index",
"c3_Apple_TransitMobility_index",
"c3_Google_WorkplacesMobility_index",
"c3_Google_TransitStationsMobility_index",
"c3_Apple_WalkingMobility_index",
"c3_Google_GroceryMobility_index",
"c3_Apple_DrivingMobility_index",
"c3_Google_RetailMobility_index",
"c3_Google_ParksMobility_index",
"c3_OxCGRT_Policy_StringencyIndex_mean_of_ordinal",
"c3_OxCGRT_Policy_ContainmentHealthIndex_mean_of_ordinal",
"c3_OxCGRT_Policy_EconomicSupportIndex_mean_of_ordinal",
"c3_OxCGRT_Policy_GovernmentResponseIndex_mean_of_ordinal")
health_status <- c("c3_MaleFemaletotal_InternationalCensus_integer",
"c3_MortalityRateUnder5International_numeric",
"c3_LifeExpectancyInternational_numeric",
"oxford_extreme_poverty_tbd",
"oxford_aged_65_older_tbd",
"oxford_aged_70_older_tbd",
"oxford_hospital_beds_per_thousand_tbd",
"oxford_male_smokers_tbd",
"oxford_cardiovasc_death_rate_tbd",
"oxford_life_expectancy_tbd",
"oxford_diabetes_prevalence_tbd",
"oxford_population_tbd",
"oxford_gdp_per_capita_tbd",
"oxford_human_development_index_tbd",
"oxford_female_smokers_tbd",
"oxford_handwashing_facilities_tbd",
"oxford_population_density_tbd",
"oxford_median_age_tbd")
leader_status <- c("leader_daysSinceStart_integer",
"leader_daysToEnd_integer",
"leader_percentTerm_numeric",
"leader_daysSinceBirth_integer")
epidemic_status <- c("cep_repronum_se_numeric",
"cep_JHU_ConfirmedDeaths_change_integer",
"c3_JHU_ConfirmedDeaths_integer",
"c3_JHU_ConfirmedCases_integer",
"cep_JHU_ConfirmedCases_change_integer",
"cep_repronum_numeric",
"cep_JHU_ConfirmedDeaths_change_by_population_numeric",
"oxford_new_deaths_smoothed_tbd",
"oxford_total_tests_tbd",
"oxford_hosp_patients_tbd",
"oxford_new_tests_smoothed_tbd",
"oxford_positive_rate_tbd",
"oxford_new_deaths_per_million_tbd",
"oxford_weekly_hosp_admissions_per_million_tbd",
"oxford_total_cases_tbd",
"oxford_weekly_icu_admissions_per_million_tbd",
"oxford_total_tests_per_thousand_tbd",
"oxford_new_cases_per_million_tbd",
"oxford_icu_patients_tbd",
"cep_JHU_ConfirmedCases_by_population_numeric",
"oxford_new_deaths_smoothed_per_million_tbd",
"oxford_hosp_patients_per_million_tbd",
"oxford_weekly_icu_admissions_tbd",
"oxford_total_cases_per_million_tbd",
"oxford_weekly_hosp_admissions_tbd",
"oxford_total_cases_per_million_tbd",
"oxford_new_tests_tbd",
"oxford_new_cases_smoothed_per_million_tbd",
"oxford_tests_per_case_tbd",
"oxford_total_deaths_per_million_tbd",
"oxford_new_cases_tbd",
"cep_JHU_ConfirmedCases_change_by_population_numeric",
"oxford_new_cases_smoothed_tbd",
"oxford_new_deaths_tbd",
"oxford_new_tests_smoothed_per_thousand_tbd",
"oxford_reproduction_rate_tbd",
"oxford_total_deaths_tbd")
#model sampling at country level
event_records_country <- event_records[which(str_detect(event_records$object,
regex("^country_"))),]
model_sampling_country <- expand.grid(epidemic_status,health_status,outcomes)
model_sampling_country <- pbmclapply(1:nrow(model_sampling_country),FUN=function(x) {
model_data <- cbind(event_records_country[,model_sampling_country[x,1]],
event_records_country[,model_sampling_country[x,2]],
event_records_country[,model_sampling_country[x,3]]) %>%
.[which(complete.cases(.)),]
if (nrow(model_data)>100) {
colnames(model_data)[3] <- "y"
model <- lm(y ~ .,
data=model_data)
model <- data.frame(epidemic_status=model_sampling_country[x,1],
health_status=model_sampling_country[x,2],
outcome=model_sampling_country[x,3],
adj_r_squared=summary(model)$adj.r.squared,
stringsAsFactors=FALSE)
} else {
model <- as.character(NA)
}
return(model)
},mc.cores=8L) %>%
.[which(!(is.na(.)))] %>%
ldply(.parallel=TRUE) %>%
mutate(.,
x=paste0(health_status,
"__",
epidemic_status),
y=outcome,
z=adj_r_squared,
.keep="none") %>%
setDT() %>%
setorder(.,
-z)
model_sampling_country$x <- factor(model_sampling_country$x,
levels=rev(unique(model_sampling_country$x)))
model_sampling_country$y <- factor(model_sampling_country$y,
levels=rev(unique(model_sampling_country$y)))
#create heatmap for adjusted r-squared
plot <- ggplot(model_sampling_country,
aes(x,y,fill=z)) +
geom_tile() +
scale_x_discrete(name="Health & Epidemic Status",
breaks=NULL,
labels=NULL) +
scale_y_discrete(name="Response",
breaks=NULL,
labels=NULL)
ggsave("response_heatmap.tiff",
plot=plot,
device="tiff",
scale=1,
width=210,
height=210,
units="mm",
dpi=300)
write.table(model_sampling_country,
file="response_heatmap.csv",
append=FALSE,
quote=FALSE,
sep=";",
row.names=FALSE,
col.names=TRUE)
#correlations health/outcomes
model_sampling_country <- expand.grid(health_status,outcomes)
model_sampling_country <- pbmclapply(1:nrow(model_sampling_country),FUN=function(x) {
model_data <- cbind(event_records_country[,model_sampling_country[x,1]],
event_records_country[,model_sampling_country[x,2]]) %>%
.[which(complete.cases(.)),]
if (nrow(model_data)>100) {
colnames(model_data) <- c("x",
"y")
cor <- cor(model_data$x,
model_data$y)
} else {
cor=as.numeric(NA)
}
model <- data.frame(health_status=model_sampling_country[x,1],
outcome=model_sampling_country[x,2],
cor=cor,
stringsAsFactors=FALSE)
return(model)
},mc.cores=8L) %>%
ldply(.parallel=TRUE) %>%
setDT() %>%
setorder(.,
-cor)
model_sampling_country <- model_sampling_country[which(!(is.na(model_sampling_country$cor))),]
model_sampling_country$health_status <- factor(model_sampling_country$health_status,
levels=rev(unique(model_sampling_country$health_status)))
model_sampling_country$outcome <- factor(model_sampling_country$outcome,
levels=rev(unique(model_sampling_country$outcome)))
#create heatmap for correlation
plot <- ggplot(model_sampling_country,
aes(health_status,outcome,fill=cor)) +
geom_tile() +
scale_x_discrete(name="Health Status",
breaks=NULL,
labels=NULL) +
scale_y_discrete(name="Response",
breaks=NULL,
labels=NULL)
ggsave("response_cor_st_heatmap.tiff",
plot=plot,
device="tiff",
scale=1,
width=210,
height=210,
units="mm",
dpi=300)
write.table(model_sampling_country,
file="response_cor_st_heatmap.csv",
append=FALSE,
quote=FALSE,
sep=";",
row.names=FALSE,
col.names=TRUE)
#correlations epidemic/outcomes
model_sampling_country <- expand.grid(epidemic_status,outcomes)
model_sampling_country <- pbmclapply(1:nrow(model_sampling_country),FUN=function(x) {
model_data <- cbind(event_records_country[,model_sampling_country[x,1]],
event_records_country[,model_sampling_country[x,2]]) %>%
.[which(complete.cases(.)),]
if (nrow(model_data)>100) {
colnames(model_data) <- c("x",
"y")
cor <- cor(model_data$x,
model_data$y)
} else {
cor=as.numeric(NA)
}
model <- data.frame(epidemic_status=model_sampling_country[x,1],
outcome=model_sampling_country[x,2],
cor=cor,
stringsAsFactors=FALSE)
return(model)
},mc.cores=8L) %>%
ldply(.parallel=TRUE) %>%
setDT() %>%
setorder(.,
-cor)
model_sampling_country <- model_sampling_country[which(!(is.na(model_sampling_country$cor))),]
model_sampling_country$epidemic_status <- factor(model_sampling_country$epidemic_status,
levels=rev(unique(model_sampling_country$epidemic_status)))
model_sampling_country$outcome <- factor(model_sampling_country$outcome,
levels=rev(unique(model_sampling_country$outcome)))
#create heatmap for correlation
plot <- ggplot(model_sampling_country,
aes(epidemic_status,outcome,fill=cor)) +
geom_tile() +
scale_x_discrete(name="Epidemic Status",
breaks=NULL,
labels=NULL) +
scale_y_discrete(name="Response",
breaks=NULL,
labels=NULL)
ggsave("response_cor_ep_heatmap.tiff",
plot=plot,
device="tiff",
scale=1,
width=210,
height=210,
units="mm",
dpi=300)
write.table(model_sampling_country,
file="response_cor_ep_heatmap.csv",
append=FALSE,
quote=FALSE,
sep=";",
row.names=FALSE,
col.names=TRUE)
model_final <- lm(c3_Apple_TransitMobility_index ~ oxford_aged_70_older_tbd + oxford_aged_65_older_tbd + oxford_median_age_tbd +
oxford_tests_per_case_tbd + oxford_new_tests_smoothed_per_thousand_tbd + oxford_total_tests_per_thousand_tbd,data=event_records_country)
event_records_country$validity <- date(substr(event_records_country$validity,
nchar(event_records_country$validity)-22,
nchar(event_records_country$validity)))
event_records_country_estimate <- event_records_country[which(event_records_country$validity<=date("2020-06-06")),]
event_records_country_test <- event_records_country[which(event_records_country$validity>date("2020-06-06")),]
model_estimate <- lm(c3_Apple_TransitMobility_index ~ oxford_aged_70_older_tbd + oxford_aged_65_older_tbd + oxford_median_age_tbd +
oxford_tests_per_case_tbd + oxford_new_tests_smoothed_per_thousand_tbd + oxford_total_tests_per_thousand_tbd,data=event_records_country_estimate)
prediction <- predict(model_estimate,
event_records_country_test)
cor(prediction,event_records_country_test$c3_Apple_TransitMobility_index,use="pairwise.complete.obs")
