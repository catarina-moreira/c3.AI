unique(.) %>%
cbind(uuidObject=UUIDgenerate(n=nrow(.)),.) %>%
select(uuidObjectType,
as.factor(uuidObject),
as.factor(description))
objectIDs <- mutate(objectIDs,
description=id) %>%
left_join(.,
objectTypeIDs,
by=c("locationType"="description")) %>%
group_by(description) %>%
unique(.) %>%
cbind(uuidObject=UUIDgenerate(n=nrow(.)),.)
View(objectIDs)
objectIDs <- rbind(countries,
states_us,
states_de)
objectTypeIDs <- data.frame(uuidObjectType=UUIDgenerate(n=length(unique(objectIDs$locationType))),
description=unique(objectIDs$locationType),
stringsAsFactors=TRUE)
save(objectTypeIDs,
file="events/objectTypeIDs.rda")
write.table(objectTypeIDs,
file="events/objectTypeIDs.csv",
row.names=FALSE,
col.names=TRUE)
objectIDs <- mutate(objectIDs,
description=id) %>%
left_join(.,
objectTypeIDs,
by=c("locationType"="description")) %>%
group_by(description) %>%
unique(.) %>%
cbind(uuidObject=UUIDgenerate(n=nrow(.)),.) %>%
select(.,
uuidObjectType,
as.factor(uuidObject),
as.factor(description))
objectIDs <- rbind(countries,
states_us,
states_de)
objectTypeIDs <- data.frame(uuidObjectType=UUIDgenerate(n=length(unique(objectIDs$locationType))),
description=unique(objectIDs$locationType),
stringsAsFactors=TRUE)
save(objectTypeIDs,
file="events/objectTypeIDs.rda")
write.table(objectTypeIDs,
file="events/objectTypeIDs.csv",
row.names=FALSE,
col.names=TRUE)
objectIDs <- mutate(objectIDs,
description=id) %>%
left_join(.,
objectTypeIDs,
by=c("locationType"="description")) %>%
group_by(description) %>%
unique(.) %>%
cbind(uuidObject=UUIDgenerate(n=nrow(.)),.) %>%
select(uuidObjectType,
uuidObject,
description)
str(objectIDs)
objectIDs <- rbind(countries,
states_us,
states_de)
objectTypeIDs <- data.frame(uuidObjectType=UUIDgenerate(n=length(unique(objectIDs$locationType))),
description=unique(objectIDs$locationType),
stringsAsFactors=TRUE)
save(objectTypeIDs,
file="events/objectTypeIDs.rda")
write.table(objectTypeIDs,
file="events/objectTypeIDs.csv",
row.names=FALSE,
col.names=TRUE)
objectIDs <- mutate(objectIDs,
description=id) %>%
left_join(.,
objectTypeIDs,
by=c("locationType"="description")) %>%
group_by(description) %>%
unique(.) %>%
cbind(uuidObject=UUIDgenerate(n=nrow(.)),.) %>%
select(uuidObjectType,
uuidObject,
description) %>%
mutate(.,
uuidObject=as.factor(uuidObject))
save(objectIDs,
file="events/objectIDs.rda")
write.table(objectIDs,
file="events/objectIDs.csv",
row.names=FALSE,
col.names=TRUE)
measureIDs <- c("Apple_WalkingMobility",
"Apple_DrivingMobility",
"Apple_TransitMobility",
"Google_ParksMobility",
"Google_ResidentialMobility",
"Google_RetailMobility",
"Google_GroceryMobility",
"Google_TransitStationsMobility",
"Google_WorkplacesMobility",
"OxCGRT_Policy_C1_Flag",
"OxCGRT_Policy_C1_SchoolClosing",
"OxCGRT_Policy_C8_InternationalTravelControls",
"OxCGRT_Policy_E1_IncomeSupport",
"OxCGRT_Policy_ConfirmedCases",
"OxCGRT_Policy_ConfirmedDeaths",
"OxCGRT_Policy_StringencyIndex",
"OxCGRT_Policy_StringencyIndexForDisplay"
"OxCGRT_Policy_StringencyLegacyIndex",
objectIDs <- rbind(countries,
states_us,
states_de)
objectTypeIDs <- data.frame(uuidObjectType=UUIDgenerate(n=length(unique(objectIDs$locationType))),
description=unique(objectIDs$locationType),
stringsAsFactors=TRUE)
save(objectTypeIDs,
file="events/objectTypeIDs.rda")
write.table(objectTypeIDs,
file="events/objectTypeIDs.csv",
row.names=FALSE,
col.names=TRUE)
objectIDs <- mutate(objectIDs,
description=id) %>%
left_join(.,
objectTypeIDs,
by=c("locationType"="description")) %>%
group_by(description) %>%
unique(.) %>%
cbind(uuidObject=UUIDgenerate(n=nrow(.)),.) %>%
select(uuidObjectType,
uuidObject,
description) %>%
mutate(.,
uuidObject=as.factor(uuidObject))
save(objectIDs,
file="events/objectIDs.rda")
write.table(objectIDs,
file="events/objectIDs.csv",
row.names=FALSE,
col.names=TRUE)
measureIDs <- c("Apple_WalkingMobility",
"Apple_DrivingMobility",
"Apple_TransitMobility",
"Google_ParksMobility",
"Google_ResidentialMobility",
"Google_RetailMobility",
"Google_GroceryMobility",
"Google_TransitStationsMobility",
"Google_WorkplacesMobility",
"OxCGRT_Policy_C1_Flag",
"OxCGRT_Policy_C1_SchoolClosing",
"OxCGRT_Policy_C8_InternationalTravelControls",
"OxCGRT_Policy_E1_IncomeSupport",
"OxCGRT_Policy_ConfirmedCases",
"OxCGRT_Policy_ConfirmedDeaths",
"OxCGRT_Policy_StringencyIndex",
"OxCGRT_Policy_StringencyIndexForDisplay",
"OxCGRT_Policy_StringencyLegacyIndex",
"OxCGRT_Policy_StringencyLegacyIndexForDisplay",
"OxCGRT_Policy_GovernmentResponseIndex",
"OxCGRT_Policy_GovernmentResponseIndexForDisplay",
"OxCGRT_Policy_ContainmentHealthIndex",
"OxCGRT_Policy_ContainmentHealthIndexForDisplay",
"OxCGRT_Policy_EconomicSupportIndex",
"OxCGRT_Policy_EconomicSupportIndexForDisplay",
"JHU_ConfirmedCases",
"JHU_ConfirmedDeaths")
measureIDs <- data.frame(uuidMeasure=UUIDgenerate(n=length(measureIDs)),
description=measureIDs,
stringsAsFactors=TRUE)
save(objectIDs,
file="events/measureIDs.rda")
write.table(objectIDs,
file="events/measureIDs.csv",
row.names=FALSE,
col.names=TRUE)
View(objectIDs)
View(objectTypeIDs)
str(objectTypeIDs)
str(oobjectIDs)
str(objectIDs)
str(measureIDs)
objectIDs <- rbind(countries,
states_us,
states_de)
objectTypeIDs <- data.frame(uuidObjectType=UUIDgenerate(n=length(unique(objectIDs$locationType))),
description=unique(objectIDs$locationType),
stringsAsFactors=TRUE)
save(objectTypeIDs,
file="events/objectTypeIDs.rda")
write.table(objectTypeIDs,
file="events/objectTypeIDs.csv",
row.names=FALSE,
col.names=TRUE)
objectIDs <- mutate(objectIDs,
description=id) %>%
left_join(.,
objectTypeIDs,
by=c("locationType"="description")) %>%
group_by(description) %>%
unique(.) %>%
cbind(uuidObject=UUIDgenerate(n=nrow(.)),.) %>%
select(uuidObjectType,
uuidObject,
description) %>%
mutate(.,
uuidObject=as.factor(uuidObject))
save(objectIDs,
file="events/objectIDs.rda")
write.table(objectIDs,
file="events/objectIDs.csv",
row.names=FALSE,
col.names=TRUE)
measureIDs <- c("Apple_WalkingMobility",
"Apple_DrivingMobility",
"Apple_TransitMobility",
"Google_ParksMobility",
"Google_ResidentialMobility",
"Google_RetailMobility",
"Google_GroceryMobility",
"Google_TransitStationsMobility",
"Google_WorkplacesMobility",
"OxCGRT_Policy_C1_Flag",
"OxCGRT_Policy_C1_SchoolClosing",
"OxCGRT_Policy_C8_InternationalTravelControls",
"OxCGRT_Policy_E1_IncomeSupport",
"OxCGRT_Policy_ConfirmedCases",
"OxCGRT_Policy_ConfirmedDeaths",
"OxCGRT_Policy_StringencyIndex",
"OxCGRT_Policy_StringencyIndexForDisplay",
"OxCGRT_Policy_StringencyLegacyIndex",
"OxCGRT_Policy_StringencyLegacyIndexForDisplay",
"OxCGRT_Policy_GovernmentResponseIndex",
"OxCGRT_Policy_GovernmentResponseIndexForDisplay",
"OxCGRT_Policy_ContainmentHealthIndex",
"OxCGRT_Policy_ContainmentHealthIndexForDisplay",
"OxCGRT_Policy_EconomicSupportIndex",
"OxCGRT_Policy_EconomicSupportIndexForDisplay",
"JHU_ConfirmedCases",
"JHU_ConfirmedDeaths")
measureIDs <- data.frame(uuidMeasure=UUIDgenerate(n=length(measureIDs)),
description=measureIDs,
stringsAsFactors=FALSE) %>%
mutate(.,
uuidMeasure=as.factor(uuidMeasure))
save(objectIDs,
file="events/measureIDs.rda")
write.table(objectIDs,
file="events/measureIDs.csv",
row.names=FALSE,
col.names=TRUE)
str(uuidMeasure)
str(measureIDs)
save(measureIDs,
file="events/measureIDs.rda")
write.table(measureIDs,
file="events/measureIDs.csv",
row.names=FALSE,
col.names=TRUE)
if (!require(plyr)) install.packages('plyr')
if (!require(tidyverse)) install.packages('tidyverse')
if (!require(httr)) install.packages('httr')
if (!require(jsonlite)) install.packages('jsonlite')
if (!require(zoo)) install.packages('zoo')
if (!require(lubridate)) install.packages('lubridate')
if (!require(uuid)) install.packages('uuid')
if (!require(pbmcapply)) install.packages('pbmcapply')
if (!require(readxl)) install.packages('readxl')
library(plyr)
library(tidyverse)
library(httr)
library(jsonlite)
library(zoo)
library(lubridate)
library(uuid)
library(pbmcapply)
library(readxl)
source("c3aidatalake.R")
countries <- fetch(
"outbreaklocation",
list(
spec = list(
filter = "locationType == 'country'"
)
),
get_all = TRUE
) %>%
select(locationType,id)
countries
states_us <- fetch(
"outbreaklocation",
list(
spec = list(
filter = "contains(id, 'UnitedStates') && locationType == 'state'"
)
),
get_all = TRUE
) %>%
select(-location) %>%
unnest_wider(fips, names_sep = ".") %>%
select(id) %>%
cbind(locationType="state_us",.)
states_us
states_de <- fetch(
"outbreaklocation",
list(
spec = list(
filter = "contains(id, 'Germany') && locationType == 'state'"
)
),
get_all = TRUE
) %>%
select(id) %>%
cbind(locationType="state_de",.)
states_de
objectIDs <- rbind(countries,
states_us,
states_de)
objectTypeIDs <- data.frame(uuidObjectType=UUIDgenerate(n=length(unique(objectIDs$locationType))),
description=unique(objectIDs$locationType),
stringsAsFactors=TRUE)
save(objectTypeIDs,
file="events/objectTypeIDs.rda")
write.table(objectTypeIDs,
file="events/objectTypeIDs.csv",
row.names=FALSE,
col.names=TRUE)
objectIDs <- mutate(objectIDs,
description=id) %>%
left_join(.,
objectTypeIDs,
by=c("locationType"="description")) %>%
group_by(description) %>%
unique(.) %>%
cbind(uuidObject=UUIDgenerate(n=nrow(.)),.) %>%
select(uuidObjectType,
uuidObject,
description) %>%
mutate(.,
uuidObject=as.factor(uuidObject))
save(objectIDs,
file="events/objectIDs.rda")
write.table(objectIDs,
file="events/objectIDs.csv",
row.names=FALSE,
col.names=TRUE)
measureIDs <- c("Apple_WalkingMobility",
"Apple_DrivingMobility",
"Apple_TransitMobility",
"Google_ParksMobility",
"Google_ResidentialMobility",
"Google_RetailMobility",
"Google_GroceryMobility",
"Google_TransitStationsMobility",
"Google_WorkplacesMobility",
"OxCGRT_Policy_C1_Flag",
"OxCGRT_Policy_C1_SchoolClosing",
"OxCGRT_Policy_C8_InternationalTravelControls",
"OxCGRT_Policy_E1_IncomeSupport",
"OxCGRT_Policy_ConfirmedCases",
"OxCGRT_Policy_ConfirmedDeaths",
"OxCGRT_Policy_StringencyIndex",
"OxCGRT_Policy_StringencyIndexForDisplay",
"OxCGRT_Policy_StringencyLegacyIndex",
"OxCGRT_Policy_StringencyLegacyIndexForDisplay",
"OxCGRT_Policy_GovernmentResponseIndex",
"OxCGRT_Policy_GovernmentResponseIndexForDisplay",
"OxCGRT_Policy_ContainmentHealthIndex",
"OxCGRT_Policy_ContainmentHealthIndexForDisplay",
"OxCGRT_Policy_EconomicSupportIndex",
"OxCGRT_Policy_EconomicSupportIndexForDisplay",
"JHU_ConfirmedCases",
"JHU_ConfirmedDeaths")
measureScales <- c("index",
"index",
"index",
"index",
"index",
"index",
"index",
"index",
"index",
"binary",
"ordinal",
"ordinal",
"ordinal",
"integer",
"integer",
"mean_of_ordinal",
"mean_of_ordinal",
"mean_of_ordinal",
"mean_of_ordinal",
"mean_of_ordinal",
"mean_of_ordinal",
"mean_of_ordinal",
"mean_of_ordinal",
"mean_of_ordinal",
"mean_of_ordinal",
"integer",
"integer")
measureIDs <- data.frame(source="c3",
uuidMeasure=UUIDgenerate(n=length(measureIDs)),
description=measureIDs,
scaleLevel=measureScales,
stringsAsFactors=FALSE) %>%
mutate(.,
uuidMeasure=as.factor(uuidMeasure))
save(measureIDs,
file="events/measureIDs.rda")
write.table(measureIDs,
file="events/measureIDs.csv",
row.names=FALSE,
col.names=TRUE)
View(objectIDs)
if (!require(plyr)) install.packages('plyr')
if (!require(tidyverse)) install.packages('tidyverse')
if (!require(httr)) install.packages('httr')
if (!require(jsonlite)) install.packages('jsonlite')
if (!require(zoo)) install.packages('zoo')
if (!require(lubridate)) install.packages('lubridate')
if (!require(uuid)) install.packages('uuid')
if (!require(pbmcapply)) install.packages('pbmcapply')
if (!require(readxl)) install.packages('readxl')
library(plyr)
library(tidyverse)
library(httr)
library(jsonlite)
library(zoo)
library(lubridate)
library(uuid)
library(pbmcapply)
library(readxl)
source("c3aidatalake.R")
load("events/objectTypeIDs.rda")
load("events/objectIDs.rda")
load("events/measureIDs.rda")
save_events <- function (data,measure_list,value_type) {
measureIDs <- data.frame(uuidMeasure=UUIDgenerate(n=length(unique(data$value_id))),
source="c3",
text=unique(data$value_id),
valueType=value_type,
stringsAsFactors=TRUE)
save(measureIDs,
file=paste0("events/",
measure_list,
".rda"))
write.table(measureIDs,
file=paste0("events/",
measure_list,
".csv"),
row.names=FALSE,
col.names=TRUE)
data <- left_join(data,
objectIDs,
by=c("name"="id")) %>%
left_join(.,
measureIDs,
by=c("value_id"="text")) %>%
select(uuidObjectType,
uuidObject,
uuidMeasure,
dates,
data)
colnames(data)[4:5] <- c("measurementTime",
"measurementValue")
data$measurementValue <- as.character(data$measurementValue)
save_group <- function(data,
uuidObjectType,
uuidMeasure) {
save(data,
file=paste0("events/",
uuidObjectType,
"_",
uuidMeasure,
".rda"))
}
data %>%
group_by(uuidObjectType,
uuidMeasure) %>%
group_walk(~ save_group(.x,
.y$uuidObjectType,
.y$uuidMeasure))
}
end_date <- Sys.Date()
data <- evalmetrics(
"outbreaklocation",
list(
spec = list(
ids = objectIDs$description,
expressions = list(
"Apple_WalkingMobility",
"Apple_DrivingMobility",
"Apple_TransitMobility",
"Google_ParksMobility",
"Google_ResidentialMobility",
"Google_RetailMobility",
"Google_GroceryMobility",
"Google_TransitStationsMobility",
"Google_WorkplacesMobility"
),
start = "2020-02-15",
end = end_date,
interval = "DAY"
)
),
get_all = TRUE
) %>%
filter(missing == 0) %>%
select(-missing)
View(data)
